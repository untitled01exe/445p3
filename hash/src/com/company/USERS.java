package com.company;

import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

public class USERS {
    //some pre-made users


    public static final byte[] u1sk = {48, -126, 1, 84, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 1, 62, 48, -126, 1, 58, 2, 1, 0, 2, 65, 0, -112, 82, 124, -121, -25, -102, 104, -70, 36, 81, 37, 47, 86, -96, 44, -114, -67, -94, 6, -121, 68, 95, 57, 97, -110, 103, -112, -70, -37, 28, 14, 8, -127, -41, -70, -60, 101, 41, -121, -17, 46, 69, 108, 112, -6, 106, 75, -55, -37, 35, 115, 20, -87, -68, 16, 42, 31, 57, 113, 64, -19, 114, -111, -9, 2, 3, 1, 0, 1, 2, 64, 1, 29, -46, 62, -50, -24, -33, -28, -120, -63, 99, -13, 64, -51, 78, 106, -16, 70, -97, -100, 78, 72, 26, 78, -119, -18, 105, 45, 56, -30, -73, -83, 16, 49, -84, 82, -37, -104, -1, -23, -20, -26, -59, -116, -95, 74, -66, -83, -23, -73, -87, 13, 3, -12, -78, 120, -84, 99, 33, -59, -49, 74, 31, -23, 2, 33, 0, -54, -92, 89, -13, -54, -78, -96, -115, 111, 41, 9, 94, 17, 24, 106, -30, 12, 25, -105, -10, -9, 63, -69, -99, -63, -117, 23, -89, 99, 65, 4, 93, 2, 33, 0, -74, 82, -19, 108, 41, 110, -111, 19, -109, 85, -72, -75, -108, 77, 89, 64, 121, -21, -83, 84, -69, 54, -16, 98, -121, 47, 6, -46, 15, -121, 74, 99, 2, 33, 0, -70, -60, 125, -49, -81, -85, -79, 68, -118, 6, -91, -122, -104, 117, 11, -43, -23, -41, 16, -13, -29, 112, 79, 72, -104, 32, -51, -99, 78, 98, -105, 85, 2, 32, 15, 114, -51, 93, 57, -47, 125, -121, 108, 23, 122, 84, 32, 97, -63, 107, 62, 41, 99, 1, 103, -17, -118, -60, -66, 113, -108, -95, 93, -31, 119, -61, 2, 32, 99, 45, -30, -119, -62, -7, -76, 12, 55, 5, -38, -95, 101, -54, -38, 110, -67, 95, 71, -58, 90, 61, 42, 112, -41, 28, -4, 50, -66, -53, 48, -111};
    public static final byte[] u1pk = {48, 92, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, 75, 0, 48, 72, 2, 65, 0, -112, 82, 124, -121, -25, -102, 104, -70, 36, 81, 37, 47, 86, -96, 44, -114, -67, -94, 6, -121, 68, 95, 57, 97, -110, 103, -112, -70, -37, 28, 14, 8, -127, -41, -70, -60, 101, 41, -121, -17, 46, 69, 108, 112, -6, 106, 75, -55, -37, 35, 115, 20, -87, -68, 16, 42, 31, 57, 113, 64, -19, 114, -111, -9, 2, 3, 1, 0, 1};
    public static User u1;

    static {
        try {
            u1 = new User("u1", u1sk, u1pk);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }


    public static final byte[] u2sk = {48, -126, 1, 85, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 1, 63, 48, -126, 1, 59, 2, 1, 0, 2, 65, 0, -92, 23, 98, -72, 61, 56, 7, -113, 100, -63, -87, 121, 81, -8, 108, -5, 63, 44, 35, 58, 61, 35, -125, -40, -24, 98, -118, 27, -37, 12, 29, -97, 3, 13, 89, 118, 24, 10, 92, 63, -108, 115, 42, -7, -5, 52, 47, -46, -94, -127, -64, -56, -115, 113, 71, -3, -67, 9, -111, 67, 122, 64, -59, -81, 2, 3, 1, 0, 1, 2, 64, 78, -117, 75, 27, -71, 97, -6, 108, 110, -28, 44, 69, 0, 49, -109, -88, -25, -30, 46, -78, -113, -43, 82, 37, 31, -121, 27, 104, -99, -1, 60, -91, -68, 96, -68, -21, -12, 105, -107, -48, -23, -37, -77, 74, -117, -87, 115, 42, 15, 67, 51, -98, -34, 48, 63, -29, -81, -13, -119, 107, 66, -6, -35, -15, 2, 33, 0, -21, -46, -83, -93, -8, 125, -7, -51, -112, -10, 123, 71, -123, -106, 62, 88, 16, -115, 112, -70, 59, 53, 55, -24, -99, -18, 80, -60, -90, 126, -64, -101, 2, 33, 0, -78, 33, -118, -61, -77, 91, -87, -35, 9, 3, -43, 118, 112, 42, 106, 8, 56, 45, 64, 40, -115, 24, -75, -49, 76, -40, 91, 32, 20, 32, -50, 125, 2, 33, 0, -28, -12, 42, 121, -93, -20, 74, -9, 117, -30, -104, 86, 28, 48, 126, 94, -23, -45, 40, -70, -26, 121, 8, -54, -29, 106, 89, 40, 83, -83, -124, 57, 2, 32, 125, -45, -1, -57, -103, -20, -56, 34, -96, -7, -102, 82, 29, -115, 120, 116, -15, -23, -43, 6, 80, 21, 2, 104, -70, -23, -94, 5, 24, -14, -53, -87, 2, 33, 0, -36, 25, 25, 75, -37, 21, 96, 2, 55, -37, -69, 118, -72, -75, 95, 89, -114, 57, 4, 22, -112, -57, -127, -63, 31, -108, 79, -8, -76, 1, -117, 52};
    public static final byte[] u2pk = {48, 92, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, 75, 0, 48, 72, 2, 65, 0, -92, 23, 98, -72, 61, 56, 7, -113, 100, -63, -87, 121, 81, -8, 108, -5, 63, 44, 35, 58, 61, 35, -125, -40, -24, 98, -118, 27, -37, 12, 29, -97, 3, 13, 89, 118, 24, 10, 92, 63, -108, 115, 42, -7, -5, 52, 47, -46, -94, -127, -64, -56, -115, 113, 71, -3, -67, 9, -111, 67, 122, 64, -59, -81, 2, 3, 1, 0, 1};
    public static User u2;

    static {
        try {
            u2 = new User("u2", u2sk, u2pk);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }


    public static final byte[] u3sk = {48, -126, 1, 84, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 1, 62, 48, -126, 1, 58, 2, 1, 0, 2, 65, 0, -117, -58, -1, 118, -78, -119, -40, 11, -101, 103, -122, -83, -53, -1, 100, 20, 121, 65, 0, -27, 39, -71, 22, -2, -109, 23, 97, -35, 101, 0, -24, -50, -36, -46, -106, 103, 100, -117, 55, -20, -77, 76, 27, 52, 73, 13, -60, -92, -93, 89, 87, -76, 124, -18, -116, -73, 18, -77, -111, -75, -82, -49, 44, 117, 2, 3, 1, 0, 1, 2, 64, 71, -122, -115, 51, 48, 41, 89, 100, -105, 33, 98, -55, -116, -102, 35, -100, 86, 111, -19, 5, 86, 78, 96, 117, -28, -49, 18, 69, 56, 106, 62, -74, -38, -96, 98, 13, -11, -16, 70, 110, 4, -124, -29, 30, -124, 112, -61, -112, -71, -17, -48, 113, 12, -22, 39, -13, 24, -50, 122, -27, -116, 74, 4, 1, 2, 33, 0, -63, -9, 45, -9, -54, -100, 29, 86, 21, 89, -53, 31, 26, 107, -67, 14, -128, -15, 43, -63, 43, 102, 28, 39, 23, 23, -17, -84, -77, 21, 27, 27, 2, 33, 0, -72, 123, 48, 99, 52, 84, 66, -24, 31, 6, 10, 112, 61, 44, 58, 98, 94, 1, 127, 61, -41, -83, 42, 121, -2, 9, -27, 14, -54, -126, 63, -81, 2, 32, 76, 54, -86, -118, 61, -61, 63, -57, -82, 85, -4, -8, -8, -79, -78, -76, 123, 55, -56, 32, 123, -60, 0, 117, -33, -98, 25, 31, -69, -78, 36, 87, 2, 33, 0, -83, 79, 13, -90, 37, 3, 3, -40, 13, 77, 31, -127, 81, -10, -70, -30, -82, 109, -71, -101, -33, -126, 78, -27, 76, 66, -1, 109, 101, -47, -9, 1, 2, 32, 41, -87, 122, -52, -106, 4, 60, 74, 49, 68, 77, 69, 58, 124, -90, -124, 50, 47, -33, 112, 0, -100, -109, -75, 13, 106, 93, -80, -15, -112, -3, -30};
    public static final byte[] u3pk = {48, 92, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, 75, 0, 48, 72, 2, 65, 0, -117, -58, -1, 118, -78, -119, -40, 11, -101, 103, -122, -83, -53, -1, 100, 20, 121, 65, 0, -27, 39, -71, 22, -2, -109, 23, 97, -35, 101, 0, -24, -50, -36, -46, -106, 103, 100, -117, 55, -20, -77, 76, 27, 52, 73, 13, -60, -92, -93, 89, 87, -76, 124, -18, -116, -73, 18, -77, -111, -75, -82, -49, 44, 117, 2, 3, 1, 0, 1};
    public static User u3;

    static {
        try {
            u3 = new User("u3", u3sk, u3pk);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }


    public static final byte[] u4sk = {48, -126, 1, 84, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 1, 62, 48, -126, 1, 58, 2, 1, 0, 2, 65, 0, -98, 13, 93, -75, -103, -117, -80, -84, 45, -43, -51, -24, -113, 58, -125, 126, -107, 125, 45, -47, 83, 113, -15, 35, 41, -70, 38, 62, -57, -7, 46, -99, -72, -33, -1, -62, -67, -114, 113, -60, -19, -72, -41, -106, -53, -79, -13, 53, -29, -31, 85, -4, -122, 86, -1, 47, -40, -1, -2, -83, 7, -80, -11, -13, 2, 3, 1, 0, 1, 2, 64, 5, -31, -53, 118, 1, -77, -32, 44, 88, 60, 87, -64, 106, -20, 43, -114, -97, 115, -100, 43, -23, 38, 25, 106, 76, -104, 63, -22, 32, 57, 22, -47, -6, -49, 60, 59, 32, 92, -10, 99, 30, 80, -115, 86, 124, 120, -81, 82, -72, -118, 97, -26, 7, 23, -127, -5, 25, 4, -74, -125, 81, 51, 69, 113, 2, 33, 0, -35, -54, 79, 17, 46, 68, 116, -44, 70, 41, 29, 58, 40, 11, 18, 46, -32, 107, 53, -67, 52, 76, 94, -25, 75, -20, 73, 72, 125, -14, 3, -69, 2, 33, 0, -74, 110, 69, -23, 5, -110, 31, 91, -39, -33, 83, 46, 95, 24, 39, 79, 7, -10, -61, 26, -107, -54, 71, 0, -63, -1, 74, 84, 76, -104, -57, 41, 2, 33, 0, -75, -34, -56, -7, 112, -76, 72, 13, 45, -65, 87, 45, 50, 90, -23, -67, 48, -32, 25, 64, 30, -101, -91, -109, 11, -118, 38, 9, -32, -27, 77, 51, 2, 32, 89, 56, -115, 80, 109, -67, 13, 65, 42, -55, 34, 49, 103, -88, -76, 112, -34, -128, 60, -29, 95, -90, -46, 26, -8, -58, 22, 96, 44, 37, -4, 33, 2, 32, 74, -120, 105, 68, -6, -89, -94, 17, 41, 70, -94, -89, -89, -67, -59, -73, 119, -99, -95, 14, -32, -81, 111, 30, -120, -53, -62, -83, -91, -7, -86, -89};
    public static final byte[] u4pk = {48, 92, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, 75, 0, 48, 72, 2, 65, 0, -98, 13, 93, -75, -103, -117, -80, -84, 45, -43, -51, -24, -113, 58, -125, 126, -107, 125, 45, -47, 83, 113, -15, 35, 41, -70, 38, 62, -57, -7, 46, -99, -72, -33, -1, -62, -67, -114, 113, -60, -19, -72, -41, -106, -53, -79, -13, 53, -29, -31, 85, -4, -122, 86, -1, 47, -40, -1, -2, -83, 7, -80, -11, -13, 2, 3, 1, 0, 1};
    public static User u4;

    static {
        try {
            u4 = new User("u4", u4sk, u4pk);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }

    public static final User[] users = {u1, u2, u3, u4};

    public String totals(){
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < users.length; i++){
            if(i > 0){
                sb.append(" ");
            }
            sb.append(users[i].toString());
        }
        return sb.toString();
    }

    public static User getUser(String seg) {
        for (User user : users) {
            if (seg.equals(user.username)) {
                return user;
            }
        }
        return null;
    }


    public USERS() throws InvalidKeySpecException, NoSuchAlgorithmException {
    }
}
